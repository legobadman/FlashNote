import "unknwn.idl";
import "ocidl.idl";


interface ICoreNotify;
interface INoteCoreObj;
interface ITrash;
interface IFreeNotes;

typedef enum NOTE_TYPE
{
	NORMAL_NOTE = 0,
	UNKNOWN_TYPE,
}NOTE_TYPE;

typedef enum NotifyOperator
{
	Add = 0,
	Delete,
	Update,
	Other,
}NotifyOperator;

typedef struct
{
	enum NotifyOperator ope;
	int idx;
	wchar_t* wid;
	INoteCoreObj* pObj;
} NotifyArg;


[object, uuid (956003E7-3C5A-42EB-BA19-D8EEF54DABFF)]
interface ICoreNotify : IUnknown {
	HRESULT onCoreNotify(INoteCoreObj* pCoreObj, NotifyArg arg);
};


[object, uuid(A13F359A-007B-472A-AC14-97FE79C404FE)]
interface INoteCoreObj : IUnknown {
	HRESULT addWatcher(ICoreNotify* pNotify);
};


[object, uuid(8FD93C3C-28FD-43E0-88B5-61D1AC4C42F0)]
interface INote : INoteCoreObj {
	HRESULT GetId([out, retval] BSTR* pbstrId);
	HRESULT SetId([in] BSTR bstrId);
	HRESULT GetBookId([out] BSTR* pBookId);
	HRESULT SetBookId([in] BSTR bookId);
	HRESULT GetTitle([out] BSTR* pbstrName);
	HRESULT SetTitle([in] BSTR title);
	HRESULT GetType([out]NOTE_TYPE* pType);
	HRESULT SetType([in]NOTE_TYPE type);
	HRESULT GetContent([out] BSTR* pbstrContent);
	HRESULT SetContent([in] BSTR content);
	HRESULT GetAbbreText([out] BSTR* pbstrAbbre);
	HRESULT SetPlainText([in] BSTR content);
	HRESULT GetCreateTime([out] long* pTime);
	HRESULT SetCreateTime([in] long time);
	HRESULT GetModifyTime([out] long* pTime);
	HRESULT SetModifyTime([in] long time);
};


[object, uuid(6FC8017C-D8CD-41D0-8C27-4C9FB7CC4CA5)]
interface INoteCollection : INoteCoreObj {
	HRESULT GetName([out] BSTR* pbstrName);
	HRESULT GetCount([out] int* pCount);
	HRESULT Item([in] VARIANT index, [out]INote** ppNote);
	HRESULT AddNote([in]INote* pNote);
	HRESULT RemoveNote([in]INote* pNote);
	HRESULT Clear();
};


[object, uuid(701090AB-4965-46F3-AEA5-36C30FBDC57A)]
interface INotebook : INoteCollection {
	HRESULT GetId([out, retval] BSTR* pbstrId);
	HRESULT SetId([in] BSTR bstrId);
	HRESULT SetName([in] BSTR bstrName);
	HRESULT GetCreateTime([out] long* pTime);
	HRESULT SetCreateTime([in] long time);
	HRESULT GetModifyTime([out] long* pTime);
	HRESULT SetModifyTime([in] long time);
	HRESULT GetNoteIdx([in]INote* pNote, [out]int* pIndex);
};


[object, uuid(279EE392-286F-4423-81B9-4DF9E2F4309E)]
interface INotebooks : INoteCoreObj {
	HRESULT GetCount([out] int* pCount);
	HRESULT Item([in] VARIANT index, [out]INotebook** ppNote);
	HRESULT AddNotebook([in]INotebook* pNotebook);
	HRESULT DeleteNotebook([in]INotebook* pNotebook);
};


[object, uuid(9ACA0D9D-3CFF-4644-92E9-863B5FBB3D02)]
interface INoteApplication : INoteCoreObj {
	HRESULT GetNotebooks([out]INotebooks** ppNotebooks);
	HRESULT SetNotebooks([in]INotebooks* pNotebooks);
	HRESULT GetTrash([out]ITrash** ppTrash);
	HRESULT SetTrash([in]ITrash* pTrash);
	HRESULT GetFreeNotes([in]IFreeNotes** ppTrash);
	HRESULT GetUserId([out]BSTR* pbstrId);
	HRESULT SetUserId([in]BSTR bstrId);
	HRESULT GetAllNotes([out]INoteCollection** pCollection);
};


[object, uuid(BEDCB647-62CD-4B76-A6ED-33DE73BC2E7A)]
interface ITrashRecord : INoteCoreObj {
	HRESULT GetId([out]BSTR* pbstrId);
	HRESULT SetId([in]BSTR bstrId);
	HRESULT GetNote([out]INote** ppNote);
	HRESULT SetNote([in]INote* pNote);
	HRESULT GetNotebook([out]INotebook** ppNotebook);
	HRESULT SetNotebook([in]INotebook* pNotebook);
};


[object, uuid(982D1B17-C848-4701-A112-7F03E4D50C70)]
interface ITrash : INoteCollection {
	HRESULT DeleteNote([in]INote* pNote);
};


[object, uuid(C97AE266-5822-4FAE-8755-DCDE145D97B6)]
interface IFreeNotes : INoteCollection {

};


//// AllNotes另外包含了所有笔记本下的笔记（不包括废纸篓下的笔记）。
//// 如果移除/移动了一份笔记，就得在原book下同样移除。
//[object, uuid(2F2D26C4-FCA7-4A9F-B062-69A682937F70)]
//interface INotes : INoteCollection {
//	HRESULT Search(BSTR content)
//};