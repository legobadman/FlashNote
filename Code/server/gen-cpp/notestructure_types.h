/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef notestructure_TYPES_H
#define notestructure_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef int64_t Timestamp;


class Note {
 public:

  static const char* ascii_fingerprint; // = "0FE07E98F8DCAA5C4CAAD9CDCED5F067";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0xE0,0x7E,0x98,0xF8,0xDC,0xAA,0x5C,0x4C,0xAA,0xD9,0xCD,0xCE,0xD5,0xF0,0x67};

  Note() : id(), title(), text_abbre(), creater_id(), create_time(0), modify_time(0), share(0) {
  }

  virtual ~Note() throw() {}

  std::string id;
  std::string title;
  std::string text_abbre;
  std::string creater_id;
  Timestamp create_time;
  Timestamp modify_time;
  bool share;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_title(const std::string& val) {
    title = val;
  }

  void __set_text_abbre(const std::string& val) {
    text_abbre = val;
  }

  void __set_creater_id(const std::string& val) {
    creater_id = val;
  }

  void __set_create_time(const Timestamp val) {
    create_time = val;
  }

  void __set_modify_time(const Timestamp val) {
    modify_time = val;
  }

  void __set_share(const bool val) {
    share = val;
  }

  bool operator == (const Note & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(text_abbre == rhs.text_abbre))
      return false;
    if (!(creater_id == rhs.creater_id))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(modify_time == rhs.modify_time))
      return false;
    if (!(share == rhs.share))
      return false;
    return true;
  }
  bool operator != (const Note &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Note & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Note &a, Note &b);


class Notebook {
 public:

  static const char* ascii_fingerprint; // = "422405715F4FD702966E81371B63B490";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x24,0x05,0x71,0x5F,0x4F,0xD7,0x02,0x96,0x6E,0x81,0x37,0x1B,0x63,0xB4,0x90};

  Notebook() : id(), name(), create_time(0), modify_time(0), creater_id(), share(0) {
  }

  virtual ~Notebook() throw() {}

  std::string id;
  std::vector<Note>  notes;
  std::string name;
  Timestamp create_time;
  Timestamp modify_time;
  std::string creater_id;
  bool share;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_notes(const std::vector<Note> & val) {
    notes = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_create_time(const Timestamp val) {
    create_time = val;
  }

  void __set_modify_time(const Timestamp val) {
    modify_time = val;
  }

  void __set_creater_id(const std::string& val) {
    creater_id = val;
  }

  void __set_share(const bool val) {
    share = val;
  }

  bool operator == (const Notebook & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(notes == rhs.notes))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(modify_time == rhs.modify_time))
      return false;
    if (!(creater_id == rhs.creater_id))
      return false;
    if (!(share == rhs.share))
      return false;
    return true;
  }
  bool operator != (const Notebook &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Notebook & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Notebook &a, Notebook &b);



#endif
