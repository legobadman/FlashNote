/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef notestructure_TYPES_H
#define notestructure_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>





class Note {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  Note() : id(), title(), text_abbre() {
  }

  virtual ~Note() throw() {}

  std::string id;
  std::string title;
  std::string text_abbre;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_title(const std::string& val) {
    title = val;
  }

  void __set_text_abbre(const std::string& val) {
    text_abbre = val;
  }

  bool operator == (const Note & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(text_abbre == rhs.text_abbre))
      return false;
    return true;
  }
  bool operator != (const Note &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Note & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Note &a, Note &b);


class Notebook {
 public:

  static const char* ascii_fingerprint; // = "0C892B07F1B7D4D077FD4E2FF0B87572";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x89,0x2B,0x07,0xF1,0xB7,0xD4,0xD0,0x77,0xFD,0x4E,0x2F,0xF0,0xB8,0x75,0x72};

  Notebook() : name() {
  }

  virtual ~Notebook() throw() {}

  std::vector<Note>  notes;
  std::string name;

  void __set_notes(const std::vector<Note> & val) {
    notes = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Notebook & rhs) const
  {
    if (!(notes == rhs.notes))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Notebook &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Notebook & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Notebook &a, Notebook &b);



#endif
