/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NoteInfo_H
#define NoteInfo_H

#include <thrift/TDispatchProcessor.h>
#include "notestructure_types.h"



class NoteInfoIf {
 public:
  virtual ~NoteInfoIf() {}
  virtual void GetNotebooks(std::vector<Notebook> & _return, const std::string& userid) = 0;
  virtual void GetContent(std::string& _return, const std::string& noteid) = 0;
};

class NoteInfoIfFactory {
 public:
  typedef NoteInfoIf Handler;

  virtual ~NoteInfoIfFactory() {}

  virtual NoteInfoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NoteInfoIf* /* handler */) = 0;
};

class NoteInfoIfSingletonFactory : virtual public NoteInfoIfFactory {
 public:
  NoteInfoIfSingletonFactory(const boost::shared_ptr<NoteInfoIf>& iface) : iface_(iface) {}
  virtual ~NoteInfoIfSingletonFactory() {}

  virtual NoteInfoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NoteInfoIf* /* handler */) {}

 protected:
  boost::shared_ptr<NoteInfoIf> iface_;
};

class NoteInfoNull : virtual public NoteInfoIf {
 public:
  virtual ~NoteInfoNull() {}
  void GetNotebooks(std::vector<Notebook> & /* _return */, const std::string& /* userid */) {
    return;
  }
  void GetContent(std::string& /* _return */, const std::string& /* noteid */) {
    return;
  }
};


class NoteInfo_GetNotebooks_args {
 public:

  NoteInfo_GetNotebooks_args() : userid() {
  }

  virtual ~NoteInfo_GetNotebooks_args() throw() {}

  std::string userid;

  void __set_userid(const std::string& val) {
    userid = val;
  }

  bool operator == (const NoteInfo_GetNotebooks_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const NoteInfo_GetNotebooks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoteInfo_GetNotebooks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NoteInfo_GetNotebooks_pargs {
 public:


  virtual ~NoteInfo_GetNotebooks_pargs() throw() {}

  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NoteInfo_GetNotebooks_result__isset {
  _NoteInfo_GetNotebooks_result__isset() : success(false) {}
  bool success;
} _NoteInfo_GetNotebooks_result__isset;

class NoteInfo_GetNotebooks_result {
 public:

  NoteInfo_GetNotebooks_result() {
  }

  virtual ~NoteInfo_GetNotebooks_result() throw() {}

  std::vector<Notebook>  success;

  _NoteInfo_GetNotebooks_result__isset __isset;

  void __set_success(const std::vector<Notebook> & val) {
    success = val;
  }

  bool operator == (const NoteInfo_GetNotebooks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NoteInfo_GetNotebooks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoteInfo_GetNotebooks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NoteInfo_GetNotebooks_presult__isset {
  _NoteInfo_GetNotebooks_presult__isset() : success(false) {}
  bool success;
} _NoteInfo_GetNotebooks_presult__isset;

class NoteInfo_GetNotebooks_presult {
 public:


  virtual ~NoteInfo_GetNotebooks_presult() throw() {}

  std::vector<Notebook> * success;

  _NoteInfo_GetNotebooks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NoteInfo_GetContent_args {
 public:

  NoteInfo_GetContent_args() : noteid() {
  }

  virtual ~NoteInfo_GetContent_args() throw() {}

  std::string noteid;

  void __set_noteid(const std::string& val) {
    noteid = val;
  }

  bool operator == (const NoteInfo_GetContent_args & rhs) const
  {
    if (!(noteid == rhs.noteid))
      return false;
    return true;
  }
  bool operator != (const NoteInfo_GetContent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoteInfo_GetContent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NoteInfo_GetContent_pargs {
 public:


  virtual ~NoteInfo_GetContent_pargs() throw() {}

  const std::string* noteid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NoteInfo_GetContent_result__isset {
  _NoteInfo_GetContent_result__isset() : success(false) {}
  bool success;
} _NoteInfo_GetContent_result__isset;

class NoteInfo_GetContent_result {
 public:

  NoteInfo_GetContent_result() : success() {
  }

  virtual ~NoteInfo_GetContent_result() throw() {}

  std::string success;

  _NoteInfo_GetContent_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const NoteInfo_GetContent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NoteInfo_GetContent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoteInfo_GetContent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NoteInfo_GetContent_presult__isset {
  _NoteInfo_GetContent_presult__isset() : success(false) {}
  bool success;
} _NoteInfo_GetContent_presult__isset;

class NoteInfo_GetContent_presult {
 public:


  virtual ~NoteInfo_GetContent_presult() throw() {}

  std::string* success;

  _NoteInfo_GetContent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NoteInfoClient : virtual public NoteInfoIf {
 public:
  NoteInfoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  NoteInfoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetNotebooks(std::vector<Notebook> & _return, const std::string& userid);
  void send_GetNotebooks(const std::string& userid);
  void recv_GetNotebooks(std::vector<Notebook> & _return);
  void GetContent(std::string& _return, const std::string& noteid);
  void send_GetContent(const std::string& noteid);
  void recv_GetContent(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NoteInfoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NoteInfoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NoteInfoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetNotebooks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetContent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NoteInfoProcessor(boost::shared_ptr<NoteInfoIf> iface) :
    iface_(iface) {
    processMap_["GetNotebooks"] = &NoteInfoProcessor::process_GetNotebooks;
    processMap_["GetContent"] = &NoteInfoProcessor::process_GetContent;
  }

  virtual ~NoteInfoProcessor() {}
};

class NoteInfoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NoteInfoProcessorFactory(const ::boost::shared_ptr< NoteInfoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NoteInfoIfFactory > handlerFactory_;
};

class NoteInfoMultiface : virtual public NoteInfoIf {
 public:
  NoteInfoMultiface(std::vector<boost::shared_ptr<NoteInfoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NoteInfoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NoteInfoIf> > ifaces_;
  NoteInfoMultiface() {}
  void add(boost::shared_ptr<NoteInfoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetNotebooks(std::vector<Notebook> & _return, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNotebooks(_return, userid);
    }
    ifaces_[i]->GetNotebooks(_return, userid);
    return;
  }

  void GetContent(std::string& _return, const std::string& noteid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetContent(_return, noteid);
    }
    ifaces_[i]->GetContent(_return, noteid);
    return;
  }

};



#endif
