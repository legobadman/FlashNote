// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "NoteInfo.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class NoteInfoHandler : virtual public NoteInfoIf {
 public:
  NoteInfoHandler() {
    // Your initialization goes here
  }

  void GetNotebooks(std::vector<Notebook> & _return, const std::string& userid) {
    // Your implementation goes here
    printf("GetNotebooks\n");
  }

  void NewNotebook(std::string& _return, const std::string& userid, const std::string& name) {
    // Your implementation goes here
    printf("NewNotebook\n");
  }

  bool DeleteNotebook(const std::string& userid, const std::string& bookid) {
    // Your implementation goes here
    printf("DeleteNotebook\n");
  }

  void NewNote(std::string& _return, const std::string& userid, const std::string& bookid, const std::string& title) {
    // Your implementation goes here
    printf("NewNote\n");
  }

  bool UpdateNote(const std::string& noteid, const std::string& title, const std::string& note) {
    // Your implementation goes here
    printf("UpdateNote\n");
  }

  void GetContent(std::string& _return, const std::string& noteid) {
    // Your implementation goes here
    printf("GetContent\n");
  }

  bool MoveNote(const std::string& noteid, const std::string& src_bookid, const std::string& dest_bookid) {
    // Your implementation goes here
    printf("MoveNote\n");
  }

  bool TrashNote(const std::string& userid, const std::string& bookid, const std::string& noteid) {
    // Your implementation goes here
    printf("TrashNote\n");
  }

  void GetTrashes(std::vector<Trash> & _return, const std::string& userid) {
    // Your implementation goes here
    printf("GetTrashes\n");
  }

  bool RecoverNote(const std::string& userid, const std::string& noteid) {
    // Your implementation goes here
    printf("RecoverNote\n");
  }

  bool DeleteNote(const std::string& userid, const std::string& noteid) {
    // Your implementation goes here
    printf("DeleteNote\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<NoteInfoHandler> handler(new NoteInfoHandler());
  shared_ptr<TProcessor> processor(new NoteInfoProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

